----------- \fullstack-codeigniter-project -------------

                     ------ Class 01 ------

1. AdminLTE download
2. htdocs/fullstack-codeigniter-project
3.composer create-project codeigniter4/appstarter backend
4. CREATE DATABASE fullstack-codeigniter-project
5. .env file config and 
6. php spark serve
7. php spark make:controller dashboard  // make controller
8. set default controller, Routes

** go to backend\app\Config\Routes.php

            $routes->setDefaultController('Dashboard');
            $routes->setAutoRoute(true);

            // setDefaultController
            $routes->get('/', 'Dashboard::index');

9. dist,plugins folder from adminLte to public/assets folder
10. copy code to admin_home.php & update path
11. templating dashboard.php
12. migration for Products      php spark make:migration Products   then cli 
    php spark migrate
    php spark migrate:refresh

13. Model for Products          php spark make:model ProductModel
    protected $allowedFields    = ['product_name','product_details','product_price'];

14. controller for Products     php spark make:controller Products --restful
15. go to controller file and import

        use App\Models\ProductModel;

    public function index(){
        $model = new ProductModel();
        $data = $model->findAll();
        print_r($data);
    }

16. routes set for Products
    php spark routes
    see all resource restful controller for Products
    and crud make

                    ------------- class 02 -------------
1. make seeder
    php spark make:seeder productSeeder
go to  backend\app\Database\Seeds\ProductSeeder.php

     $datas = [
            [
                'product_name'      => 'Black Jacket',
                'product_details'   => 'Cloths',
                'product_price'   => '2000',
            ],
            [
                'product_name'      => 'Shirt',
                'product_details'   => 'Cloths',
                'product_price'   => '1200',
            ],
        ];

        // Simple Queries
        // $this->db->query('INSERT INTO users (username, email) VALUES(:username:, :email:)', $data);

        // Using Query Builder

        foreach($datas as $data){
            $this->db->table('products')->insert($data); 
        }

    Than cli 
    php spark db:seed productSeeder

2. Add new product

** backend\app\Controllers\Products.php

    public function new(){
        return view("product/product_entry");
    }

** create view page product_entry.php
    and form create ...

    <form method="post" action="<?= base_url('products/create')?>" >
    ....

**  backend\app\Controllers\Products.php

    public function create(){

        $validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[10]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
           return view('product/product_entry', ['validation' => $this->validator]);
        }else{
            $model = new ProductModel();
            $data = $this->request->getPost();
            $model->save($data);
            return redirect()->to('/products');
        }


    }

** for set value in form Controllers\Products.php

    function __construct(){
            helper(['form', 'url']);
        }
** in form
    value="<?= set_value('product_name') ?>"

        ## Errro message show  ## 
        $validation->getErrors() // all errors
        $validation->getError() // single errors

                            if(isset($validation)){
                                $errors = $validation->getErrors();
                                    if(count($errors)> 0){
                                        echo "<ul>";
                                            foreach($errors as $err){
                                                echo "<li> $err </li>";
                                            }
                                        echo "</ul>";
                                    }
                            }

** each field set
<span class="text-danger" >
            <?php 
                if(isset($validation)){
                    $error = $validation->getError('product_price');
                    echo $error;
                }
            ?>
</span>

---------------------------------------------------------------------------------------------------------------

                        ------------- class 03 edit update -------------

1. public function edit($id = null){

        $model = new ProductModel();
        $data['product'] = $model->find($id);
        return view('product/product_edit', $data);
    }

2. 
    public function update($id = null){

        $validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }else{
            $model = new ProductModel();
            $data = [
                'product_name' => $this->request->getVar('product_name'),
                'product_details'  => $this->request->getVar('product_details'),
                'product_price'  => $this->request->getVar('product_price'),
            ];
            $model->update($id, $data);
            return $this->response->redirect(site_url('/products'));
        }

    }

   
                            ---------- validation Edit Page ---------------------

** controller
$validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }

** product_edit.php
up from
     <?php 
        $errors =  [];
            if(session()->has('errors')){
                $errors =  session()->errors;
            }
    ?>

** input field inside value

    value="<?= old('product_name') ? old('product_name') : $product['product_name']?>"


** input field outside

    <span class="text-danger" >
        <?=isset($errors['product_price']) ? $errors['product_price'] : ""?>
    </span>




** product controller 

    update(){

        return redirect()->to('/products')->with('msg', 'Update Successfully');
    }


** confirmation message product_list.php
    // Seesion msg
        <?php
        
            if(session()->has('msg')): ?>

                <div class="alert alert-success">
                    <?= session()->msg; ?>
                </div>
                
        <?php endif; ?>


             ---------- Add new Product: validation and Success message ---------------------

1. go to controller 

    public function create(){

        $rules = [
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required|numeric',
        ];

        $errors = 
            [
                'product_name' => [
                    'required' => 'Product Name Must be fill',
                    'min_length' => 'Minimum Length 5',
                    'max_length' => 'Maximum Length 15',
                ],
                'product_details' => [
                    'required' => 'Product Details Must be fill',
                    'max_length' => 'Maximum Length 5',
                ],
                'product_price' => [
                    'required' => 'Product Price Must be fill',
                    'numeric' => 'Price Must be Number'
                ],
        ];

        $validation = $this->validate($rules, $errors);
        
        if(!$validation){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }else{
                $model = new ProductModel();
                $data = $this->request->getPost();
                $model->save($data);
                return redirect()->to('/products')->with('msg', 'Created Successfully');
            }


    }
    

2. product_entry.php

    <!-- Seesion msg -->
    <?php           
            if(session()->has('msg')): ?>
            <div class="alert alert-success">
                <?= session()->msg; ?>
            </div>
    <?php endif; ?>

      <!-- error session store -->
        <?php 
            $errors =  [];
            if(session()->has('errors')){
                $errors =  session()->errors;
            }
        ?>


    value="<?php echo old('product_name') ?>" >

    <span class="text-danger" >
        <?=isset($errors['product_name']) ? $errors['product_name'] : ""?>
    </span>