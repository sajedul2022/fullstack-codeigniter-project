----------- \fullstack-codeigniter-project -------------

                     ------ Class 01 ------

1. AdminLTE download
2. htdocs/fullstack-codeigniter-project
3.composer create-project codeigniter4/appstarter backend
4. CREATE DATABASE fullstack-codeigniter-project
5. .env file config and 
6. php spark serve
7. php spark make:controller dashboard  // make controller
8. set default controller, Routes

** go to backend\app\Config\Routes.php

            $routes->setDefaultController('Dashboard');
            $routes->setAutoRoute(true);

            // setDefaultController
            $routes->get('/', 'Dashboard::index');

9. dist,plugins folder from adminLte to public/assets folder
10. copy code to admin_home.php & update path
11. templating dashboard.php
12. migration for Products      php spark make:migration Products   then cli 
    php spark migrate
    php spark migrate:refresh

13. Model for Products          php spark make:model ProductModel
    protected $allowedFields    = ['product_name','product_details','product_price'];

14. controller for Products     php spark make:controller Products --restful
15. go to controller file and import

        use App\Models\ProductModel;

    public function index(){
        $model = new ProductModel();
        $data = $model->findAll();
        print_r($data);
    }

16. routes set for Products
    php spark routes
    see all resource restful controller for Products
    and crud make

                    ------------- class 02 -------------
1. make seeder
    php spark make:seeder productSeeder

go to  backend\app\Database\Seeds\ProductSeeder.php

     $datas = [
            [
                'product_name'      => 'Black Jacket',
                'product_details'   => 'Cloths',
                'product_price'   => '2000',
            ],
            [
                'product_name'      => 'Shirt',
                'product_details'   => 'Cloths',
                'product_price'   => '1200',
            ],
        ];

        // Simple Queries
        // $this->db->query('INSERT INTO users (username, email) VALUES(:username:, :email:)', $data);

        // Using Query Builder

        foreach($datas as $data){
            $this->db->table('products')->insert($data); 
        }

    Than cli 
    php spark db:seed productSeeder

2. Add new product

** backend\app\Controllers\Products.php

    public function new(){
        return view("product/product_entry");
    }

** create view page product_entry.php
    and form create ...

    <form method="post" action="<?= base_url('products/create')?>" >
    ....

**  backend\app\Controllers\Products.php

    public function create(){

        $validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[10]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
           return view('product/product_entry', ['validation' => $this->validator]);
        }else{
            $model = new ProductModel();
            $data = $this->request->getPost();
            $model->save($data);
            return redirect()->to('/products');
        }


    }

** for set value in form Controllers\Products.php

    function __construct(){
            helper(['form', 'url']);
        }
** in form
    value="<?= set_value('product_name') ?>"

        ## Errro message show  ## 
        $validation->getErrors() // all errors
        $validation->getError() // single errors

                            if(isset($validation)){
                                $errors = $validation->getErrors();
                                    if(count($errors)> 0){
                                        echo "<ul>";
                                            foreach($errors as $err){
                                                echo "<li> $err </li>";
                                            }
                                        echo "</ul>";
                                    }
                            }

** each field set
<span class="text-danger" >
            <?php 
                if(isset($validation)){
                    $error = $validation->getError('product_price');
                    echo $error;
                }
            ?>
</span>

---------------------------------------------------------------------------------------------------------------

                        ------------- class 03 edit update -------------

1. public function edit($id = null){

        $model = new ProductModel();
        $data['product'] = $model->find($id);
        return view('product/product_edit', $data);
    }

2. 
    public function update($id = null){

        $validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }else{
            $model = new ProductModel();
            $data = [
                'product_name' => $this->request->getVar('product_name'),
                'product_details'  => $this->request->getVar('product_details'),
                'product_price'  => $this->request->getVar('product_price'),
            ];
            $model->update($id, $data);
            return $this->response->redirect(site_url('/products'));
        }

    }

   
                            ---------- validation Edit Page ---------------------

** controller
$validate = $this->validate([
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required',
        ]);

        if(!$validate){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }

** product_edit.php
up from
     <?php 
        $errors =  [];
            if(session()->has('errors')){
                $errors =  session()->errors;
            }
    ?>

** input field inside value

    value="<?= old('product_name') ? old('product_name') : $product['product_name']?>"


** input field outside

    <span class="text-danger" >
        <?=isset($errors['product_price']) ? $errors['product_price'] : ""?>
    </span>




** product controller 

    update(){

        return redirect()->to('/products')->with('msg', 'Update Successfully');
    }


** confirmation message product_list.php
    // Seesion msg
        <?php
        
            if(session()->has('msg')): ?>

                <div class="alert alert-success">
                    <?= session()->msg; ?>
                </div>
                
        <?php endif; ?>


             ---------- Add new Product: validation and Success message ---------------------

1. go to controller 

    public function create(){

        $rules = [
            'product_name' => 'required|min_length[5]|max_length[15]',
            'product_details' => 'required|min_length[10]',
            'product_price' => 'required|numeric',
        ];

        $errors = 
            [
                'product_name' => [
                    'required' => 'Product Name Must be fill',
                    'min_length' => 'Minimum Length 5',
                    'max_length' => 'Maximum Length 15',
                ],
                'product_details' => [
                    'required' => 'Product Details Must be fill',
                    'max_length' => 'Maximum Length 5',
                ],
                'product_price' => [
                    'required' => 'Product Price Must be fill',
                    'numeric' => 'Price Must be Number'
                ],
        ];

        $validation = $this->validate($rules, $errors);
        
        if(!$validation){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }else{
                $model = new ProductModel();
                $data = $this->request->getPost();
                $model->save($data);
                return redirect()->to('/products')->with('msg', 'Created Successfully');
            }


    }
    

2. product_entry.php

    <!-- Seesion msg -->
    <?php           
            if(session()->has('msg')): ?>
            <div class="alert alert-success">
                <?= session()->msg; ?>
            </div>
    <?php endif; ?>

      <!-- error session store -->
        <?php 
            $errors =  [];
            if(session()->has('errors')){
                $errors =  session()->errors;
            }
        ?>


    value="<?php echo old('product_name') ?>" >

    <span class="text-danger" >
        <?=isset($errors['product_name']) ? $errors['product_name'] : ""?>
    </span>

------------------------------------- Class04 Product Image Upload ------------------


1. backend\app\Database\Migrations\2022-12-26-110349_Products.php   add field
    function up(){
        // ....
      'product_price' => [
                'type' => 'DECIMAL',
                'constraint'     => '10,2'
            ],
            'product_image' => [
                'type' => 'VARCHAR',
                'constraint'     => 100,
                'null' => true
            ],
            'product_category' => [
               'id' => 'TINYINT'
            ],
    }

2. php spark migrate:refresh

3. backend\app\Database\Seeds\ProductSeeder.php
    add coloumn
        'product_category' => 7

    php spark db:seed productSeeder

4. see blog 
    https://www.positronx.io/codeigniter-file-upload-example-tutorial/

5. backend\app\Views\product\product_entry.php
    ** in form 
        enctype="multipart/form-data"
    ** new input for file

            <label for="exampleInputEmail1">Product Image</label>
            <input name="product_image" type="file" class="form-control" id="exampleInputEmail1"  value="<?= old('product_image') ?>">

            <span class="text-danger" >
                <?=isset($errors['product_image']) ? $errors['product_image'] : ""?>
            </span>


6. backend\app\Models\ProductModel.php

    protected $allowedFields    = ['product_name','product_details','product_price','product_image', 'product_category'];


7. validation add

 $rules = [
        //..
        'product_image' => [
                                'uploaded[product_image]',
                                'mime_in[product_image,image/jpg,image/jpeg,image/png]',
                                'max_size[product_image,1024]',
                            ]
        }

 $errors = 
            [
                    'product_image' => [
                    'uploaded' => 'Image Must be upload',
                    'mime_in' => 'Only image/jpg,image/jpeg,image/png Allowed',
                    'max_size' => 'Image not more than 1MB'
                ],
            ]

// for image upload

              

                $model = new ProductModel();
                
                // for image upload
                $img = $this->request->getFile('product_image');
                $img->move("assets/" . 'uploads');
                
                 $data = [
                    'product_name' => $this->request->getPost('product_name'),
                    'product_details'  => $this->request->getPost('product_details'),
                    'product_price'  => $this->request->getPost('product_price'),
                    'product_image' =>  $img->getName(),

                ];

                $model->save($data);
                return redirect()->to('/products')->with('msg', 'Created Successfully');
            

// show frontend
    <img src="assets\uploads\fridge.jpg<?= $product['product_image'] ?>" alt="image">

    OR

    1. backend\app\Controllers\Products.php
        // for image upload
                $img = $this->request->getFile('product_image');
                $path = "assets/" . 'uploads/';
                $img->move($path);
                
                 $data = [
                    'product_name' => $this->request->getPost('product_name'),
                    'product_details'  => $this->request->getPost('product_details'),
                    'product_price'  => $this->request->getPost('product_price'),
                    $namepath = $path.$img->getName(),
                    'product_image' =>  $namepath

                ];

                $model->save($data);
                return redirect()->to('/products')->with('msg', 'Created Successfully');
            }
    
    2. <img src="<?= $product['product_image'] ?>" alt="image">

                ============ Update for Image upload =================

1. backend\app\Views\product\product_edit.php    in form add 
    enctype="multipart/form-data"

    and add image input file

2. controller
    public function update($id = null){

        $rules = [

            //..
            'product_image' => [
                                'uploaded[product_image]',
                                'mime_in[product_image,image/jpg,image/jpeg,image/png]',
                                'max_size[product_image,1024]',
                                ]
        ];

        $errors = 
            [
                //...
                'product_image' => [
                    'uploaded' => 'Image Must be upload',
                    'mime_in' => 'Only image/jpg,image/jpeg,image/png Allowed',
                    'max_size' => 'Image not more than 1MB'
                ],
        ];

        $validation = $this->validate($rules, $errors);
        

        if(!$validation){
            return redirect()->back()->withInput()->with('errors',$this->validator->getErrors());
        }else{
             // for image upload
             $img = $this->request->getFile('product_image');
             $path = "assets/uploads/";
             $img->move($path);

            $data = [
                'product_name' => $this->request->getVar('product_name'),
                'product_details'  => $this->request->getVar('product_details'),
                'product_price'  => $this->request->getVar('product_price'),
                $namepath = $path.$img->getName(),
                'product_image' =>  $namepath
            ];

            $model = new ProductModel();
            $model->update($id, $data);

            return redirect()->to('/products')->with('msg', 'Update Successfully');
        }

                    ===== Category ====
1. category table (id,cat_name)
    php spark make:migration category

        public function up(){

        $this->forge->addField([
            'id' => [
                'type'           => 'INT',
                'constraint'     => 5,
                'unsigned'       => true,
                'auto_increment' => true,
            ],
            'product_name' => [
                'type'       => 'VARCHAR',
                'constraint' => '100',
            ],
            'product_details' => [
                'type' => 'TEXT',
                'null' => true,
            ],
            'product_price' => [
                'type' => 'DECIMAL',
                'constraint'     => '10,2'
            ],
            'product_image' => [
                'type' => 'VARCHAR',
                'constraint'     => 100,
                'null' => true
            ],
            'product_category' => [
                'type' => 'TINYINT'
            ],
        ]);
        $this->forge->addKey('id', true);
        $this->forge->createTable('products');
    }

    public function down(){
        $this->forge->dropTable('products');
    }
    

2. php spark migrate

3. php spark make:model categoryModel

        protected $allowedFields    = ['cat_name'];

4. entry form add

    <div class="form-group">
        <label for="exampleInputEmail1">Product Category</label>
        <select name="product_category" class="form-control">
            <option value="" selected disabled > Select One</option>
            <option value="" > News Item</option>
        </select> 
    </div>

5. product controller

    use App\Models\CategoryModel;

     public function new(){

        $catmodel = new CategoryModel();
        $data['cats'] = $catmodel->orderBy('cat_name')->findAll();

        return view("product/product_entry",$data);
    }

6. product_entry.php   page loop for pull from mysql
    <?php 
    foreach($cats as $cat) : ?>
        <option value="<?= $cat['id']; ?>" > <?= $cat['cat_name']; ?> </option>
    <?php endforeach; ?>

7. controller
    'product_category'  => $this->request->getPost('product_category'),


=============================== Class 05 Login Register Authentication ====================================

https://www.positronx.io/codeigniter-authentication-login-and-registration-tutorial/


1. php spark make:migration users
    add table, column and field

2. php spark migrate

3. php spark make:model usersModel

backend\app\Models\UsersModel.php
    protected $allowedFields    = ['name','email','password'];

4. php spark make:controller SignupController

        public function index(){
        return view('auth/signup');
    }


5. create view auth folder and signup.php 
    create form template

6. Routes
    $routes->get('/users/signup', 'SignupController::index');
    $routes->post('/users/store', 'SignupController::store');

7. php spark make:controller SigninController  // login


8. routes
    $routes->get('/users/signin', 'SigninController::index');
    $routes->post('/users/login', 'SigninController::loginAuth');


9. old data

     return redirect()->back()->withInput();
    value="<?= old('email') ?>"

            ============ Authentication || app/Config/Filters.php  =========
1. php spark make:filter AuthGuard

2. app/Config/Filters.php
    'authGuard' => \App\Filters\AuthGuard::class,

3. backend\app\Filters\AuthGuard.php

    public function before(RequestInterface $request, $arguments = null){
        
        if (!session()->get('isLoggedIn')){
            return redirect()
                ->to('/signin');
        }
    }

4. $routes->get('/dashboard', 'Dashboard::index',['filter' => 'authGuard']);


                    ========  Logout ==========

1. $routes->get('/users/logout', 'SigninController::logout');

2. SigninController::logout
 public function logout(){
        
        $sessin = session();
        $sessin->destroy();
        return redirect()->to('/users/signin');

    }


                ===== Group Routes ======





=================== React with codeigniter ============
https://mfikri.com/en/blog/react-crud-codeigniter


1.php spark make:filter Cors 

2. backend\app\Config\Filters.php

    use App\Filters\Cors;
    public $aliases = [
        //..
        'cors'          =>  Cors::class,
    ]

    public $globals = [
        'before' => [
            // 'honeypot',
            // 'csrf',
            // 'invalidchars',
            'cors'
        ],
    
3. backend\app\Controllers\Products.php

    use CodeIgniter\API\ResponseTrait;

    use ResponseTrait;

    return $this->respond($data); // see json data


                        --------------- Login Authentication -----------
1. without Logging not entry

    $routes->Presenter('products',['filter' => 'authGuard']); 

                        ---------- Active Record: Query Builder Class --------------

1. php spark make:controller qb

        public function index(){
        $db      = \Config\Database::connect();
        // $builder = $db->table('products')->limit(3,1);
        $builder = $db->table('products');

        $row = $builder->get();
        // $row = $builder->getWhere(['id' => 4]);
        $data['products'] = $row->getResult();

        // echo "<pre>";
        //    print_r($data);
        // echo "</pre>";

        return view('test', $data);
        
    }
    

2. backend\app\Config\Routes.php
    $routes->get('/qb', 'Qb::index');

3. for specific select field  

    //for specific select field    

    public function selectqb(){
        $db      = \Config\Database::connect();
        $builder = $db->table('products');

        ## $builder->select()

        // $row = $builder->select('id,product_name,product_price');
        // $data = $row->get();
        // $data = $data->getResult();


        ## $builder->selectMax()

        // $row = $builder->selectMax('product_price');
        // $data = $row->get();
        // $data = $data->getResult();

        ## $builder->selectSum()

        // $row = $builder->selectSum('product_price');
        // $data = $row->get();
        // $data = $data->getResult();

        ## $builder->select('product_category')->selectSum('product_price')->groupBy('product_category')

        // $row = $builder->select('product_category')->selectSum('product_price')->groupBy('product_category');
        // $data = $row->get();
        // $data = $data->getResult();

        ## $builder->join()

        // $builder->select('*');
        // $row = $builder->join('categories', 'categories.id = products.product_category');
        // $data = $row->get()->getResult();

        ## $builder->where()

        // $builder2 = $db->table('products,categories');
        // $row = $builder2->where('categories.id = products.product_category');
        // $data = $row->get()->getResult();

        ## specific data show and where specific id

        $row = $builder->where('product_price > 500');
        $row = $builder->where('product_category > 1');
        $data = $row->get()->getResult();


        echo "<pre>";
           print_r($data);
        echo "</pre>";
        
    }

    ** backend\app\Config\Routes.php
        $routes->get('/qb/select', 'Qb::selectqb');
